/*
Copyright 2025 The gflow Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package rpc;

import "types/bpmn.proto";
import "types/internal.proto";
// for grpc-gateway
import "google/api/annotations.proto";

import "validate/validate.proto";

option go_package = "github.com/olive-io/gflow/api/rpc;rpc";
option java_multiple_files = true;
option java_package = "io.olive.gflow.api.rpc";
option java_outer_classname = "GFlowRPC";

service SystemRPC {
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      get: "/v1/ping"
    };
  }
  // Register registers runner
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/v1/runners/register"
      body: "*"
    };
  }
  // Disregister disregisters runner
  rpc Disregister(DisregisterRequest) returns (DisregisterResponse) {
    option (google.api.http) = {
      post: "/v1/runners/disregister"
      body: "*"
    };
  }
  rpc ListRunners(ListRunnersRequest) returns (ListRunnersResponse) {
    option (google.api.http) = {
      get: "/v1/runners"
    };
  };
  rpc GetRunner(GetRunnerRequest) returns (GetRunnerResponse) {
    option (google.api.http) = {
      get: "/v1/runners/{id}"
    };
  };
  rpc RunnerDispatch(stream RunnerDispatchRequest) returns (stream RunnerDispatchResponse) {};
}

message PingRequest {}

message PingResponse {
  string reply = 1;
}

message RegisterRequest {
  types.Runner runner = 1;
  repeated types.Endpoint endpoints = 2;
}

message RegisterResponse {
  types.Runner runner = 1;
}

message DisregisterRequest {
  string id = 1;
}

message DisregisterResponse {
  types.Runner runner = 1;
}

message ListRunnersRequest {}

message ListRunnersResponse {
  repeated types.Runner runners = 1;
}

message GetRunnerRequest {
  uint64 id = 1;
  string uid = 2;
}

message GetRunnerResponse {
  types.Runner runner = 1;
  types.RunnerStat stat = 2;
}

message HandshakeRequest {
  types.Runner runner = 1;
}

message HandshakeResponse {}

message HeartBeatRequest {
  types.RunnerStat stat = 1;
}

message HeartBeatResponse {}

message CallTaskRequest {
  enum Stage {
    Commit = 0;
    Rollback = 1;
    Destroy = 2;
  }
  uint64 seq_id = 1;
  Stage stage = 2;
  types.FlowNodeType flowType = 3;
  string kind = 4;
  string name = 5;
  map<string, string> headers = 6;
  map<string, string> properties = 7;
  map<string, string> dataObjects = 8;
  int64 timeout = 9;

  uint64 uid = 100;
}

message CallTaskResponse {
  uint64 seq_id = 1;
  map<string, string> results = 2;
  map<string, string> dataObjects = 3;
  string error = 4;

  uint64 uid = 100;
}

message RunnerDispatchRequest {
  HandshakeRequest handshake = 1;
  HeartBeatRequest heartbeat = 2;
  CallTaskResponse callTask = 3;
}

message RunnerDispatchResponse {
  HandshakeResponse handshake = 1;
  HeartBeatResponse HeartBeat = 2;
  CallTaskRequest callTask = 3;
}

service BpmnRPC {
  rpc DeployDefinition(DeployDefinitionsRequest) returns (DeployDefinitionsResponse) {
    option (google.api.http) = {
      post: "/v1/definitions"
      body: "*"
    };
  };
  rpc ListDefinitions(ListDefinitionsRequest) returns (ListDefinitionsResponse) {
    option (google.api.http) = {
      get: "/v1/definitions"
    };
  };
  rpc GetDefinitions(GetDefinitionsRequest) returns (GetDefinitionsResponse) {
    option (google.api.http) = {
      get: "/v1/definitions/{uid}"
    };
  };
  rpc RemoveDefinitions(RemoveDefinitionsRequest) returns (RemoveDefinitionsResponse) {
    option (google.api.http) = {
      delete: "/v1/definitions/{uid}"
    };
  };
  rpc ExecuteProcess(ExecuteProcessRequest) returns (ExecuteProcessResponse) {
    option (google.api.http) = {
      post: "/v1/processes/execute"
      body: "*"
    };
  };
  rpc ListProcess(ListProcessRequest) returns (ListProcessResponse) {
    option (google.api.http) = {
      get: "/v1/processes"
    };
  }
  rpc GetProcess(GetProcessRequest) returns (GetProcessResponse) {
    option (google.api.http) = {
      get: "/v1/processes/{id}"
    };
  }
}

message DeployDefinitionsRequest {
  map<string, string> metadata = 1;

  bytes content = 2;

  string description = 3 [(validate.rules).string.min_len = 10];
}

message DeployDefinitionsResponse {
  types.Definitions definitions = 1;
}

message ListDefinitionsRequest {
  int32 page = 1 [(validate.rules).int32.gt = 0];
  int32 size = 2 [(validate.rules).int32.gt = 0];
}

message ListDefinitionsResponse {
  repeated types.Definitions definitions_list = 1;
  int64 total = 2;
}

message GetDefinitionsRequest {
  string uid = 1;
  uint64 version = 2;
}

message GetDefinitionsResponse {
  types.Definitions definitions = 1;
}

message RemoveDefinitionsRequest {
  string uid = 1;
  uint64 version = 2;
}

message RemoveDefinitionsResponse {
  types.Definitions definitions = 1;
}

message ExecuteProcessRequest {
  string name = 1;
  string definitions_uid = 2;
  uint64 definitions_version = 3;
  int64 priority = 4;
  map<string, string> headers = 5;
  map<string, types.Value> properties = 6;
  map<string, types.Value> dataObjects = 7;
}

message ExecuteProcessResponse {
  types.Process process = 1;
}

message ListProcessRequest {
  int32 page = 1 [(validate.rules).int32.gt = 0];
  int32 size = 2 [(validate.rules).int32.gt = 0];
  string definitions_uid = 3;
  uint64 definitions_version = 4;
}

message ListProcessResponse {
  repeated types.Process processes = 1;
  int64 total = 2;
}

message GetProcessRequest {
  int64 id = 1;
}

message GetProcessResponse {
  types.Process process = 1;
  repeated types.FlowNode activities = 2;
}