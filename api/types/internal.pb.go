// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/internal.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Runner_TransportType int32

const (
	Runner_GRPCStream Runner_TransportType = 0
	Runner_GRPCEcho   Runner_TransportType = 1
	Runner_Http       Runner_TransportType = 2
)

var Runner_TransportType_name = map[int32]string{
	0: "GRPCStream",
	1: "GRPCEcho",
	2: "Http",
}

var Runner_TransportType_value = map[string]int32{
	"GRPCStream": 0,
	"GRPCEcho":   1,
	"Http":       2,
}

func (x Runner_TransportType) String() string {
	return proto.EnumName(Runner_TransportType_name, int32(x))
}

func (Runner_TransportType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f64495044b5fbf5, []int{0, 0}
}

// Runner means olive-runner, the runner component of olive system
type Runner struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary"`
	CreateAt int64  `protobuf:"varint,2,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty" gorm:"autoCreateTime"`
	// Unique identified by runner
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// Name is the human-readable name of the runner.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// listenURL is the URL the runner is listening on.
	ListenUrl        string               `protobuf:"bytes,5,opt,name=listen_url,json=listenUrl,proto3" json:"listen_url,omitempty"`
	Version          string               `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	HeartbeatMs      int64                `protobuf:"varint,7,opt,name=heartbeat_ms,json=heartbeatMs,proto3" json:"heartbeat_ms,omitempty"`
	Hostname         string               `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Metadata         map[string]string    `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" gorm:"serializer:json"`
	Features         map[string]string    `protobuf:"bytes,10,rep,name=features,proto3" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" gorm:"serializer:json"`
	Transport        Runner_TransportType `protobuf:"varint,11,opt,name=transport,proto3,enum=types.Runner_TransportType" json:"transport,omitempty"`
	Cpu              uint64               `protobuf:"varint,12,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           uint64               `protobuf:"varint,13,opt,name=memory,proto3" json:"memory,omitempty"`
	OnlineTimestamp  int64                `protobuf:"varint,14,opt,name=online_timestamp,json=onlineTimestamp,proto3" json:"online_timestamp,omitempty"`
	OfflineTimestamp int64                `protobuf:"varint,15,opt,name=offline_timestamp,json=offlineTimestamp,proto3" json:"offline_timestamp,omitempty"`
	Online           int32                `protobuf:"varint,16,opt,name=online,proto3" json:"online,omitempty"`
}

func (m *Runner) Reset()         { *m = Runner{} }
func (m *Runner) String() string { return proto.CompactTextString(m) }
func (*Runner) ProtoMessage()    {}
func (*Runner) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f64495044b5fbf5, []int{0}
}
func (m *Runner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Runner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Runner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Runner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Runner.Merge(m, src)
}
func (m *Runner) XXX_Size() int {
	return m.Size()
}
func (m *Runner) XXX_DiscardUnknown() {
	xxx_messageInfo_Runner.DiscardUnknown(m)
}

var xxx_messageInfo_Runner proto.InternalMessageInfo

type RunnerStat struct {
	Id            uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid           string  `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	CpuUsed       float64 `protobuf:"fixed64,3,opt,name=cpuUsed,proto3" json:"cpuUsed,omitempty"`
	MemoryUsed    float64 `protobuf:"fixed64,4,opt,name=memoryUsed,proto3" json:"memoryUsed,omitempty"`
	State         string  `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Error         string  `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	Timestamp     int64   `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Steps         uint64  `protobuf:"varint,11,opt,name=steps,proto3" json:"steps,omitempty"`
	CommitCount   uint64  `protobuf:"varint,12,opt,name=commit_count,json=commitCount,proto3" json:"commit_count,omitempty"`
	RollbackCount uint64  `protobuf:"varint,13,opt,name=rollback_count,json=rollbackCount,proto3" json:"rollback_count,omitempty"`
	DestroyCount  uint64  `protobuf:"varint,14,opt,name=destroy_count,json=destroyCount,proto3" json:"destroy_count,omitempty"`
}

func (m *RunnerStat) Reset()         { *m = RunnerStat{} }
func (m *RunnerStat) String() string { return proto.CompactTextString(m) }
func (*RunnerStat) ProtoMessage()    {}
func (*RunnerStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f64495044b5fbf5, []int{1}
}
func (m *RunnerStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunnerStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunnerStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunnerStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerStat.Merge(m, src)
}
func (m *RunnerStat) XXX_Size() int {
	return m.Size()
}
func (m *RunnerStat) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerStat.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerStat proto.InternalMessageInfo

type ExecuteProcessMsg struct {
	Process int64 `protobuf:"varint,1,opt,name=process,proto3" json:"process,omitempty"`
}

func (m *ExecuteProcessMsg) Reset()         { *m = ExecuteProcessMsg{} }
func (m *ExecuteProcessMsg) String() string { return proto.CompactTextString(m) }
func (*ExecuteProcessMsg) ProtoMessage()    {}
func (*ExecuteProcessMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f64495044b5fbf5, []int{2}
}
func (m *ExecuteProcessMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteProcessMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteProcessMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteProcessMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteProcessMsg.Merge(m, src)
}
func (m *ExecuteProcessMsg) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteProcessMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteProcessMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteProcessMsg proto.InternalMessageInfo

type RunnerEvent struct {
	ExecuteProcess *ExecuteProcessMsg `protobuf:"bytes,1,opt,name=execute_process,json=executeProcess,proto3" json:"execute_process,omitempty"`
}

func (m *RunnerEvent) Reset()         { *m = RunnerEvent{} }
func (m *RunnerEvent) String() string { return proto.CompactTextString(m) }
func (*RunnerEvent) ProtoMessage()    {}
func (*RunnerEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f64495044b5fbf5, []int{3}
}
func (m *RunnerEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunnerEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunnerEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunnerEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerEvent.Merge(m, src)
}
func (m *RunnerEvent) XXX_Size() int {
	return m.Size()
}
func (m *RunnerEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerEvent proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("types.Runner_TransportType", Runner_TransportType_name, Runner_TransportType_value)
	proto.RegisterType((*Runner)(nil), "types.Runner")
	proto.RegisterMapType((map[string]string)(nil), "types.Runner.FeaturesEntry")
	proto.RegisterMapType((map[string]string)(nil), "types.Runner.MetadataEntry")
	proto.RegisterType((*RunnerStat)(nil), "types.RunnerStat")
	proto.RegisterType((*ExecuteProcessMsg)(nil), "types.ExecuteProcessMsg")
	proto.RegisterType((*RunnerEvent)(nil), "types.RunnerEvent")
}

func init() { proto.RegisterFile("types/internal.proto", fileDescriptor_3f64495044b5fbf5) }

var fileDescriptor_3f64495044b5fbf5 = []byte{
	// 802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xda, 0x8e, 0x63, 0x3f, 0xc7, 0x8e, 0x3b, 0x0d, 0xd1, 0xc8, 0x85, 0x95, 0xd9, 0x0a,
	0xc9, 0x15, 0xaa, 0x2d, 0x95, 0x43, 0x21, 0x3d, 0xd5, 0x51, 0x80, 0x4b, 0x44, 0xb4, 0x75, 0x2f,
	0x5c, 0xac, 0xc9, 0xfa, 0xc5, 0x19, 0xba, 0xbb, 0xb3, 0x9a, 0x79, 0x1b, 0x30, 0x67, 0x7e, 0x00,
	0x47, 0xc4, 0x81, 0xbf, 0x01, 0x3f, 0xa1, 0xc7, 0x1e, 0x39, 0x42, 0xf2, 0x47, 0xd0, 0xcc, 0xac,
	0xe3, 0xa6, 0x70, 0xa0, 0x17, 0xfb, 0x7d, 0xdf, 0xfb, 0xde, 0xf3, 0xcc, 0x37, 0xef, 0x19, 0x0e,
	0x68, 0x5d, 0xa0, 0x99, 0xca, 0x9c, 0x50, 0xe7, 0x22, 0x9d, 0x14, 0x5a, 0x91, 0x62, 0x3b, 0x8e,
	0x1d, 0xde, 0x27, 0xb1, 0x5a, 0xa1, 0x9e, 0xfa, 0x2f, 0x9f, 0x1b, 0x1e, 0xac, 0xd4, 0x4a, 0xb9,
	0x70, 0x6a, 0x23, 0xcf, 0x46, 0x7f, 0xb4, 0xa0, 0x15, 0x97, 0x79, 0x8e, 0x9a, 0x3d, 0x84, 0xba,
	0x5c, 0xf2, 0x60, 0x14, 0x8c, 0x9b, 0xb3, 0xfb, 0xbf, 0xfe, 0xf4, 0x5b, 0xa3, 0xbf, 0x52, 0x3a,
	0x3b, 0x8a, 0x0a, 0x2d, 0x33, 0xa1, 0xd7, 0x51, 0x5c, 0x97, 0x4b, 0xf6, 0x14, 0x3a, 0x89, 0x46,
	0x41, 0xb8, 0x10, 0xc4, 0xeb, 0xa3, 0x60, 0xdc, 0x98, 0x0d, 0xad, 0xf6, 0x03, 0xaf, 0x15, 0x25,
	0xa9, 0x63, 0x97, 0x9f, 0xcb, 0x0c, 0xa3, 0xb8, 0xed, 0xc5, 0xcf, 0x89, 0x0d, 0xa0, 0x51, 0xca,
	0x25, 0x6f, 0x8c, 0x82, 0x71, 0x27, 0xb6, 0x21, 0x63, 0xd0, 0xcc, 0x45, 0x86, 0xbc, 0xe9, 0x28,
	0x17, 0xb3, 0x8f, 0x00, 0x52, 0x69, 0x08, 0xf3, 0x45, 0xa9, 0x53, 0xbe, 0xe3, 0x32, 0x1d, 0xcf,
	0xbc, 0xd4, 0x29, 0xe3, 0xb0, 0x7b, 0x85, 0xda, 0x48, 0x95, 0xf3, 0x96, 0xcb, 0x6d, 0x20, 0xfb,
	0x18, 0xf6, 0x2e, 0x51, 0x68, 0x3a, 0x47, 0x41, 0x8b, 0xcc, 0xf0, 0x5d, 0x7b, 0xb4, 0xb8, 0x7b,
	0xcb, 0x9d, 0x1a, 0x36, 0x84, 0xf6, 0xa5, 0x32, 0xe4, 0x7e, 0xb3, 0xed, 0xaa, 0x6f, 0x31, 0x9b,
	0x43, 0x3b, 0x43, 0x12, 0x4b, 0x41, 0x82, 0x77, 0x46, 0x8d, 0x71, 0xf7, 0xc9, 0x83, 0x89, 0xf3,
	0x72, 0xe2, 0xcd, 0x99, 0x9c, 0x56, 0xd9, 0x93, 0x9c, 0xf4, 0x7a, 0xf6, 0xc0, 0x5e, 0xf9, 0xd0,
	0x5f, 0xd9, 0xa0, 0x96, 0x22, 0x95, 0x3f, 0xa2, 0x3e, 0xfa, 0xce, 0xa8, 0x3c, 0x8a, 0x6f, 0x3b,
	0xd9, 0xae, 0x17, 0x28, 0xa8, 0xd4, 0x68, 0x38, 0xfc, 0x57, 0xd7, 0x2f, 0xab, 0xec, 0xff, 0xe9,
	0xba, 0xe9, 0xc4, 0xbe, 0x80, 0x0e, 0x69, 0x91, 0x9b, 0x42, 0x69, 0xe2, 0xdd, 0x51, 0x30, 0xee,
	0xbf, 0xdb, 0x76, 0xbe, 0x49, 0xcf, 0xd7, 0x05, 0xc6, 0x5b, 0xb5, 0x7d, 0x84, 0xa4, 0x28, 0xf9,
	0x9e, 0x7d, 0xe3, 0xd8, 0x86, 0xec, 0x10, 0x5a, 0x19, 0x66, 0x4a, 0xaf, 0x79, 0xcf, 0x91, 0x15,
	0x62, 0x8f, 0x60, 0xa0, 0xf2, 0x54, 0xe6, 0xb8, 0x20, 0x99, 0xa1, 0x21, 0x91, 0x15, 0xbc, 0xef,
	0x3c, 0xdd, 0xf7, 0xfc, 0x7c, 0x43, 0xb3, 0x4f, 0xe1, 0x9e, 0xba, 0xb8, 0x78, 0x47, 0xbb, 0xef,
	0xb4, 0x83, 0x2a, 0xb1, 0x15, 0x1f, 0x42, 0xcb, 0xd7, 0xf3, 0xc1, 0x28, 0x18, 0xef, 0xc4, 0x15,
	0x1a, 0x3e, 0x83, 0xde, 0x1d, 0x8b, 0xed, 0x51, 0x5f, 0xe1, 0xda, 0x8d, 0x63, 0x27, 0xb6, 0x21,
	0x3b, 0x80, 0x9d, 0x2b, 0x91, 0x96, 0xe8, 0xc6, 0xae, 0x13, 0x7b, 0x70, 0x54, 0xff, 0x3c, 0xb0,
	0xc5, 0x77, 0x9c, 0x7c, 0x9f, 0xe2, 0xe8, 0x29, 0xf4, 0xee, 0xf8, 0xc5, 0xfa, 0x00, 0x5f, 0xc5,
	0x67, 0xc7, 0x2f, 0x48, 0xa3, 0xc8, 0x06, 0x35, 0xb6, 0x07, 0x6d, 0x8b, 0x4f, 0x92, 0x4b, 0x35,
	0x08, 0x58, 0x1b, 0x9a, 0x5f, 0x13, 0x15, 0x83, 0x7a, 0xf4, 0x7b, 0x1d, 0xc0, 0x1b, 0xfe, 0x82,
	0x04, 0xb1, 0xfe, 0x76, 0x7d, 0xdc, 0xa6, 0x54, 0x03, 0x5f, 0xdf, 0x0e, 0x3c, 0x87, 0xdd, 0xa4,
	0x28, 0x5f, 0x1a, 0xf4, 0x6b, 0x10, 0xc4, 0x1b, 0xc8, 0x42, 0x00, 0xef, 0xbb, 0x4b, 0x36, 0x5d,
	0xf2, 0x2d, 0xc6, 0x9e, 0xde, 0x90, 0x20, 0xac, 0x36, 0xc2, 0x03, 0xcb, 0xa2, 0xd6, 0x4a, 0x57,
	0xbb, 0xe0, 0x01, 0xfb, 0x10, 0x3a, 0xdb, 0x67, 0xf0, 0x6b, 0xb0, 0x25, 0x7c, 0x27, 0x2c, 0x8c,
	0x1b, 0x9c, 0x66, 0xec, 0x81, 0xdd, 0x9e, 0x44, 0x65, 0x99, 0xa4, 0x45, 0xa2, 0xca, 0x9c, 0xaa,
	0x01, 0xe9, 0x7a, 0xee, 0xd8, 0x52, 0xec, 0x13, 0xe8, 0x6b, 0x95, 0xa6, 0xe7, 0x22, 0x79, 0x55,
	0x89, 0xfc, 0xc0, 0xf4, 0x36, 0xac, 0x97, 0x3d, 0x84, 0xde, 0x12, 0x0d, 0x69, 0xb5, 0xae, 0x54,
	0x7d, 0xa7, 0xda, 0xab, 0x48, 0x27, 0x8a, 0x1e, 0xc3, 0xbd, 0x93, 0x1f, 0x30, 0x29, 0x09, 0xcf,
	0xb4, 0x4a, 0xd0, 0x98, 0x53, 0xb3, 0xb2, 0xee, 0x14, 0x1e, 0x39, 0x13, 0x1b, 0xf1, 0x06, 0x46,
	0x67, 0xd0, 0xf5, 0x3e, 0x9f, 0x5c, 0x61, 0x4e, 0xec, 0x39, 0xec, 0xa3, 0xaf, 0x5e, 0xbc, 0x5d,
	0xd0, 0x7d, 0xc2, 0xab, 0x2d, 0xf8, 0x57, 0xef, 0xb8, 0x8f, 0x77, 0xa8, 0x99, 0x79, 0xfd, 0x77,
	0x58, 0x7b, 0x7d, 0x1d, 0x06, 0x6f, 0xae, 0xc3, 0xe0, 0xaf, 0xeb, 0x30, 0xf8, 0xf9, 0x26, 0xac,
	0xfd, 0x72, 0x13, 0xd6, 0xde, 0xdc, 0x84, 0xb5, 0x3f, 0x6f, 0xc2, 0x1a, 0x70, 0xa9, 0x26, 0x2a,
	0x95, 0x57, 0x38, 0x59, 0x5d, 0xa4, 0xea, 0xfb, 0x89, 0x28, 0xa4, 0xef, 0x3e, 0x83, 0x6f, 0x2c,
	0x6d, 0x27, 0xc5, 0x9c, 0x05, 0xdf, 0x3e, 0x5a, 0x49, 0xba, 0x2c, 0xcf, 0x27, 0x89, 0xca, 0xa6,
	0x4e, 0xff, 0x58, 0xaa, 0xa9, 0x2b, 0x99, 0x8a, 0x42, 0x4e, 0x5d, 0xc9, 0x33, 0xf7, 0x79, 0xde,
	0x72, 0xff, 0xb8, 0x9f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x2c, 0xd8, 0x02, 0xbb, 0x05,
	0x00, 0x00,
}

func (m *Runner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Runner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Runner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Online != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Online))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.OfflineTimestamp != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.OfflineTimestamp))
		i--
		dAtA[i] = 0x78
	}
	if m.OnlineTimestamp != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.OnlineTimestamp))
		i--
		dAtA[i] = 0x70
	}
	if m.Memory != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x68
	}
	if m.Cpu != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Cpu))
		i--
		dAtA[i] = 0x60
	}
	if m.Transport != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Transport))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Features) > 0 {
		for k := range m.Features {
			v := m.Features[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintInternal(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInternal(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInternal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintInternal(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInternal(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInternal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x42
	}
	if m.HeartbeatMs != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.HeartbeatMs))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ListenUrl) > 0 {
		i -= len(m.ListenUrl)
		copy(dAtA[i:], m.ListenUrl)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ListenUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreateAt != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RunnerStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunnerStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunnerStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestroyCount != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.DestroyCount))
		i--
		dAtA[i] = 0x70
	}
	if m.RollbackCount != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.RollbackCount))
		i--
		dAtA[i] = 0x68
	}
	if m.CommitCount != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.CommitCount))
		i--
		dAtA[i] = 0x60
	}
	if m.Steps != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Steps))
		i--
		dAtA[i] = 0x58
	}
	if m.Timestamp != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MemoryUsed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MemoryUsed))))
		i--
		dAtA[i] = 0x21
	}
	if m.CpuUsed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuUsed))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteProcessMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteProcessMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteProcessMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Process != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Process))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RunnerEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunnerEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunnerEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecuteProcess != nil {
		{
			size, err := m.ExecuteProcess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInternal(dAtA []byte, offset int, v uint64) int {
	offset -= sovInternal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Runner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInternal(uint64(m.Id))
	}
	if m.CreateAt != 0 {
		n += 1 + sovInternal(uint64(m.CreateAt))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.ListenUrl)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.HeartbeatMs != 0 {
		n += 1 + sovInternal(uint64(m.HeartbeatMs))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovInternal(uint64(len(k))) + 1 + len(v) + sovInternal(uint64(len(v)))
			n += mapEntrySize + 1 + sovInternal(uint64(mapEntrySize))
		}
	}
	if len(m.Features) > 0 {
		for k, v := range m.Features {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovInternal(uint64(len(k))) + 1 + len(v) + sovInternal(uint64(len(v)))
			n += mapEntrySize + 1 + sovInternal(uint64(mapEntrySize))
		}
	}
	if m.Transport != 0 {
		n += 1 + sovInternal(uint64(m.Transport))
	}
	if m.Cpu != 0 {
		n += 1 + sovInternal(uint64(m.Cpu))
	}
	if m.Memory != 0 {
		n += 1 + sovInternal(uint64(m.Memory))
	}
	if m.OnlineTimestamp != 0 {
		n += 1 + sovInternal(uint64(m.OnlineTimestamp))
	}
	if m.OfflineTimestamp != 0 {
		n += 1 + sovInternal(uint64(m.OfflineTimestamp))
	}
	if m.Online != 0 {
		n += 2 + sovInternal(uint64(m.Online))
	}
	return n
}

func (m *RunnerStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInternal(uint64(m.Id))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.CpuUsed != 0 {
		n += 9
	}
	if m.MemoryUsed != 0 {
		n += 9
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovInternal(uint64(m.Timestamp))
	}
	if m.Steps != 0 {
		n += 1 + sovInternal(uint64(m.Steps))
	}
	if m.CommitCount != 0 {
		n += 1 + sovInternal(uint64(m.CommitCount))
	}
	if m.RollbackCount != 0 {
		n += 1 + sovInternal(uint64(m.RollbackCount))
	}
	if m.DestroyCount != 0 {
		n += 1 + sovInternal(uint64(m.DestroyCount))
	}
	return n
}

func (m *ExecuteProcessMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Process != 0 {
		n += 1 + sovInternal(uint64(m.Process))
	}
	return n
}

func (m *RunnerEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecuteProcess != nil {
		l = m.ExecuteProcess.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func sovInternal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInternal(x uint64) (n int) {
	return sovInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Runner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Runner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Runner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListenUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatMs", wireType)
			}
			m.HeartbeatMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInternal
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInternal
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthInternal
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthInternal
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInternal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthInternal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Features == nil {
				m.Features = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInternal
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInternal
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthInternal
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthInternal
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInternal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthInternal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Features[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			m.Transport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Transport |= Runner_TransportType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			m.Cpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineTimestamp", wireType)
			}
			m.OnlineTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineTimestamp", wireType)
			}
			m.OfflineTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfflineTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunnerStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUsed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuUsed = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MemoryUsed = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steps", wireType)
			}
			m.Steps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Steps |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitCount", wireType)
			}
			m.CommitCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollbackCount", wireType)
			}
			m.RollbackCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RollbackCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestroyCount", wireType)
			}
			m.DestroyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestroyCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteProcessMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteProcessMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteProcessMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			m.Process = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Process |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunnerEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteProcess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecuteProcess == nil {
				m.ExecuteProcess = &ExecuteProcessMsg{}
			}
			if err := m.ExecuteProcess.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInternal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInternal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInternal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInternal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInternal = fmt.Errorf("proto: unexpected end of group")
)
